<?php

namespace Pandra;

require_once 'PHPUnit/Framework.php';

class ColumnFamilyTestObject extends ColumnFamily {

    public function init() {
        $this->setKeySpace('Keyspace1');
        $this->setName('Standard1');
    }

}

/**
 * Test class forColumn.
 * Generated by PHPUnit on 2010-01-09 at 11:52:23.
 */
class ColumnTest extends \PHPUnit_Framework_TestCase {

    public $obj = NULL;
    public $parent = NULL;
    public $columnName = 'mycolumn';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * To test multiple nodes, add their connection strings here
     *
     * @access protected
     */
    protected function setUp() {
        Core::connectSeededKeyspace('localhost');

        $this->parent = new ColumnFamily();
        $this->parent->setKeySpace('Keyspace1');
        $this->parent->setName('Standard1');

        $this->obj = new Column($this->columnName);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {

    }

    public function testSetGetValue() {
        $newValue = 'NEW VALUE';

        $this->obj->reset();
        $this->assertTrue($this->obj->setValue($newValue));
        $this->assertTrue($this->obj->isModified());
        $this->assertEquals($newValue, $this->obj->getValue());
    }

    public function testSetValueValidated() {
        $this->obj->reset();
        $this->obj->setTypeDef(array('string'));
        $this->assertFalse($this->obj->setValue(1));


        $this->assertTrue(array_key_exists($this->columnName, $this->obj->getLastError()));
        $this->assertFalse($this->obj->isModified());
    }

    public function testSetKeyValidated() {
        $this->obj->reset();
        $this->obj->setKeyValidator(array('string20'));
        $newKey = 1;
        $this->assertFalse($this->obj->setKeyID($newKey));
        $this->assertFalse($this->obj->getKeyID() == $newKey);
    }

    public function testBindTime() {
        $time = $this->obj->bindTime();
        ///$this->assertType(PHPUnit_Framework_Constraint_IsType::TYPE_INT, $time);
        $this->assertEquals($time, $this->obj->timestamp);

        $time = time();
        sleep(1);
        $colTime = $this->obj->bindTime($time);
        $this->assertType(\PHPUnit_Framework_Constraint_IsType::TYPE_INT, $colTime);
        $this->assertEquals($time, $this->obj->timestamp);
    }

    public function testReset() {
        $this->assertFalse($this->obj->isModified());
        $this->obj->setValue('NEW VALUE');
        $this->assertTrue($this->obj->isModified());

        $this->obj->reset();
        $this->assertFalse($this->obj->isModified());
    }

    /**
     * @expectedException RuntimeException
     */
    public function testCallbackValue() {
        $this->obj->setCallback('md5');
        $value = 'NEW VALUE';
        $this->obj->setValue($value);

        $this->assertEquals($this->obj->value, $value);

        $md5Value = md5($value);
        $this->assertEquals($this->obj->callbackValue(), $md5Value);

        // try to set a bad callback function name (our value hash) - should generate the expectedException
        $this->obj->setCallback($md5Value);
    }

    public function testCast() {

        $column = new \cassandra_Column();
        $column->name = 'castedColumn';
        $column->value = 'THRIFT COLUMN VALUE';

        $Column = Column::cast($column, $this->parent);

        $this->assertEquals(get_class($Column), 'Column');
        $this->assertEquals($Column->getValue(), $column->value);

        // Test ColumnOrSuperColumn casting
        $sc = new \cassandra_ColumnOrSuperColumn();
        $this->assertNull(Column::cast($sc));

        $sc->column = new \cassandra_Column();
        $sc->column->name = 'new column';
        $sc->column->value = 'value';
        $sc->column->timestamp = Core::getTime();

        $Column = Column::cast($sc);
        $this->assertEquals(get_class($Column), 'Column');
        $this->assertEquals($Column->getValue(), $sc->column->value);
    }

    public function testIsModifed() {
        $this->assertFalse($this->obj->isModified());
        $this->obj->setValue('OH HI GREAT TO SEE YOU');
        $this->assertTrue($this->obj->isModified());
    }

    /**
     * @expectedException RuntimeException
     */
    public function testSetGetParent() {
        $this->obj->disown();

        $this->obj->setParent($this->parent);
        $this->assertEquals($this->parent, $this->obj->getParent());

        // Test detachment
        $this->obj->detach();

        $this->assertNull($this->obj->getParent());
        $parentColumns = $this->parent->getColumns();
        $this->assertTrue(empty($parentColumns));


        $badContainer = new SuperColumnFamily();

        $this->obj->setParent($badContainer);
    }

    public function testSaveLoadDelete() {
        $keyID = 'ColumnTest';
        $keySpace = 'Keyspace1';
        $columnFamily = 'Standard1';

        $value = 'test value';
        $this->obj->setValue($value);

        // Save by explicitly setting  keyid/keyspace/cf
        $this->obj->setKeyID($keyID);
        $this->obj->setKeyspace($keySpace);
        $this->obj->setColumnFamilyName($columnFamily);

        $this->assertTrue($this->obj->isModified());
        $this->assertTrue($this->obj->save(), $this->obj->getLastError());

        //$column = array_pop(Core::getCFSlice($keySpace, $keyID, $columnFamily))->column;
        $this->assertTrue($this->obj->load());
        $column = $this->obj;
        $this->assertTrue($column->value == $value && $column->name == $this->obj->getName() && empty(Core::$lastError), Core::$lastError);

        $this->obj->delete();
        $this->assertTrue($this->obj->isModified() && $this->obj->isDeleted());
        $this->assertTrue($this->obj->save(), $this->obj->getLastError());

        $columnParent = new \cassandra_ColumnParent(array('column_family' => $columnFamily));
        $predicate = newSlicePredicate('Column', array('column' => $this->obj->getName()));

        $result = Core::getCFSlice($keySpace, $keyID, $columnParent, $predicate);
        $this->assertTrue(empty($result) && empty(Core::$lastError), Core::$lastError);

        // save using parent
        $this->obj->setKeyID(NULL);
        $this->obj->setKeyspace(NULL);
        $this->obj->setColumnFamilyName(NULL);

        $parent = clone $this->parent;

        // Wait so we don't have a delete/insert timestamp in the same second (32 bit systems)
        if (PHP_INT_SIZE == 4) {
            sleep(1);
        }

        $parent->setKeyID($keyID);
        $parent->setKeySpace($keySpace);
        $parent->setName($columnFamily);

        $this->obj->setParent($parent);

        $value = 'new test value';
        $this->obj->setValue($value);

        $this->assertTrue($this->obj->isModified());
        $this->assertTrue($this->obj->save(), $this->obj->getLastError());

        $columnParent = new \cassandra_ColumnParent(array('column_family' => $columnFamily));
        $predicate = newSlicePredicate('Column', array('column' => $this->obj->getName()));

        $column = array_pop(Core::getCFSlice($keySpace, $keyID, $columnParent, $predicate))->column;
        $this->assertTrue($column->value == $value && $column->name = $this->obj->name && empty(Core::$lastError), Core::$lastError);

        $this->obj->delete();
        $this->assertTrue($this->obj->isModified() && $this->obj->isDeleted());
        $this->assertTrue($this->obj->save(), $this->obj->getLastError());
    }

    public function testRegisterError() {
        $errorMsg = 'ERROR STRING';
        $this->obj->registerError($errorMsg);
        $this->assertTrue($this->obj->getLastError() == $errorMsg);

        $errors = $this->obj->getErrors();
        $this->assertTrue(array_pop($errors) == $errorMsg);
    }

}

?>